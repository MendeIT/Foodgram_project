name: Main Foodgram workflow

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master

jobs:

  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        cd backend/
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test with flake8
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        export DJANGO_KEY="0-42!#@*6jqo)lv^+@-+&(-@kjke@xzk%)1!w)vz-1uwk71p)="
        python -m flake8 backend/
  
  automated-api-tests:
    name: Automated API tests using Postman CLI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
    
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          cd backend/
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          export DJANGO_KEY="0-42!#@*6jqo)lv^+@-+&(-@kjke@xzk%)1!w)vz-1uwk71p)="
      - name: Migrate and load ingredinets & tags
        run: |
          python manage.py migrate --settings "foodgram_project.settings.settings_develop"
          python manage.py loadingredientstags --settings "foodgram_project.settings.settings_develop"
      - name: Run server with Develop settings
        run: |
          python manage.py runserver --settings "foodgram_project.settings.settings_develop"
      - uses: actions/checkout@v3
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "27683968-fc6a4e2d-2ef9-46e4-8a30-226c21c562f0"
      - name: Logout to Postman CLI
        run: postman logout ${{ secrets.POSTMAN_API_KEY }}
      - name: Delete data from DB
        run: |
          cd ../postman-collection/
          bash clear_db.sh
      - name: Stop server
        run: |
          ^C

  backend_build_and_push_to_docker_hub:
    name: Push Docker backend image to DockerHub
    runs-on: ubuntu-latest
    needs: 
      - tests
      - automated-api-tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker 
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}} 
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./backend/
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/foodgram_backend:latest

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Set up nodeJS
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install dependencies
      run: |
        cd frontend/
        npm ci

    - name: Test frontend
      run: |
        cd frontend/
        npm run test
  
  frontend_build_and_push_to_docker_hub:
    name: Push Docker frontend image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker 
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/foodgram_frontend:latest

  gateway_build_and_push_to_docker_hub:
    name: Push Docker gateway image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker 
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - backend_build_and_push_to_docker_hub
      - frontend_build_and_push_to_docker_hub
      - gateway_build_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.YANDEX_PRACTICUM_VM_HOST }}
        username: ${{ secrets.YANDEX_PRACTICUM_VM_USER }}
        key: ${{ secrets.YANDEX_PRACTICUM_VM_SSH_KEY }}
        passphrase: ${{ secrets.YANDEX_PRACTICUM_VM_SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "foodgram"

    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.YANDEX_PRACTICUM_VM_HOST }}
        username: ${{ secrets.YANDEX_PRACTICUM_VM_USER }}
        key: ${{ secrets.YANDEX_PRACTICUM_VM_SSH_KEY }}
        passphrase: ${{ secrets.YANDEX_PRACTICUM_VM_SSH_PASSPHRASE }}
        script: |
          cd foodgram
          make deploy
          make cleanhost

  send_telegram_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой ${{github.repository}} успешно выполнен!
